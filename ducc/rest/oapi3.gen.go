// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cvmfs/ducc/lib"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for JobStatus.
const (
	Failed    JobStatus = "failed"
	Pending   JobStatus = "pending"
	Running   JobStatus = "running"
	Succeeded JobStatus = "succeeded"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Job defines model for Job.
type Job struct {
	// CreatedAt Time when job was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Error Error message if job failed
	Error *string `json:"error,omitempty"`

	// FinishedAt Time when job was finished
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	// Id ID of job
	Id int64 `json:"id"`

	// StartedAt Time when job was started
	StartedAt *time.Time `json:"startedAt,omitempty"`

	// Status Status of job
	Status JobStatus `json:"status"`
	Wish   Wish      `json:"wish"`
}

// JobStatus Status of job
type JobStatus string

// NewWish defines model for NewWish.
type NewWish struct {
	// CvmfsRepo The target CernVM-FS repository to store the layers and the flat root file systems.
	CvmfsRepo string `json:"cvmfsRepo"`

	// Uri Image uri on the format REGISTRY/REPOSITORY[:TAG][@DIGEST]
	Uri string `json:"uri"`
}

// Wish defines model for Wish.
type Wish struct {
	// ConvertAgain Convert again images that are already successfull converted.
	ConvertAgain *lib.OptionalBool `json:"convertAgain,omitempty"`

	// CreateFlat Create a flat image (compatible with singularity)
	CreateFlat *lib.OptionalBool `json:"createFlat,omitempty"`

	// CreateLayers Do not unpack the layers into the repository. If this is disabled, `createThinImage` and `createPodman` must also be disabled.
	CreateLayers *lib.OptionalBool `json:"createLayers,omitempty"`

	// CreatePodman Create Podman image store. To enable, `createLayers` must also be enabled.
	CreatePodman *lib.OptionalBool `json:"createPodman,omitempty"`

	// CreateThinImage Create and push a thin image (compatible with docker). To enable, `createLayers` must also be enabled.
	CreateThinImage *lib.OptionalBool `json:"createThinImage,omitempty"`

	// CvmfsRepo The target CernVM-FS repository to store the layers and the flat root file systems.
	CvmfsRepo string `json:"cvmfsRepo"`

	// FullSyncIntervalSec Automatically trigger full syncs at regular intervals. (0 to disable)
	FullSyncIntervalSec *string `json:"fullSyncIntervalSec,omitempty"`

	// Id ID of wish
	Id int64 `json:"id"`

	// InputUri Url on the format REGISTRY/REPOSITORY[:TAG][@DIGEST] for the image to be converted. The tag can contain wildcard characters, `*`.
	InputUri string `json:"inputUri"`

	// LastConfigUpdate The time when the configuration was last updated
	LastConfigUpdate *time.Time `json:"lastConfigUpdate,omitempty"`

	// LastFullSyncFinished The time when the last full sync was finished
	LastFullSyncFinished *time.Time `json:"lastFullSyncFinished,omitempty"`

	// LastFullSyncStarted The time when the last full sync was started
	LastFullSyncStarted *time.Time `json:"lastFullSyncStarted,omitempty"`

	// OverwriteLayers Overwrite layers that are already present in the CernVM-FS repository.
	OverwriteLayers *lib.OptionalBool `json:"overwriteLayers,omitempty"`

	// Source Unique identifier of the source of the wish. This is used to avoid duplicate wishes.
	Source string `json:"source"`

	// WebhookEnabled Automatically trigger uptates upon receiving incoming webhooks. (Harbor webhooks are supported)
	WebhookEnabled *lib.OptionalBool `json:"webhookEnabled,omitempty"`
}

// AddWishJSONRequestBody defines body for AddWish for application/json ContentType.
type AddWishJSONRequestBody = NewWish

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetWishes request
	GetWishes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddWish request with any body
	AddWishWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddWish(ctx context.Context, body AddWishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWishById request
	GetWishById(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyncWishById request
	SyncWishById(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetWishes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWishesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddWishWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddWishRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddWish(ctx context.Context, body AddWishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddWishRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWishById(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWishByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyncWishById(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSyncWishByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetWishesRequest generates requests for GetWishes
func NewGetWishesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddWishRequest calls the generic AddWish builder with application/json body
func NewAddWishRequest(server string, body AddWishJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddWishRequestWithBody(server, "application/json", bodyReader)
}

// NewAddWishRequestWithBody generates requests for AddWish with any type of body
func NewAddWishRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWishByIdRequest generates requests for GetWishById
func NewGetWishByIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyncWishByIdRequest generates requests for SyncWishById
func NewSyncWishByIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishes/%s/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWishes request
	GetWishesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWishesResponse, error)

	// AddWish request with any body
	AddWishWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddWishResponse, error)

	AddWishWithResponse(ctx context.Context, body AddWishJSONRequestBody, reqEditors ...RequestEditorFn) (*AddWishResponse, error)

	// GetWishById request
	GetWishByIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetWishByIdResponse, error)

	// SyncWishById request
	SyncWishByIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*SyncWishByIdResponse, error)
}

type GetWishesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Wish
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetWishesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWishesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddWishResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Job
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AddWishResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddWishResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWishByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Wish
	JSON404      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetWishByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWishByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyncWishByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Job
	JSON404      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r SyncWishByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyncWishByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWishesWithResponse request returning *GetWishesResponse
func (c *ClientWithResponses) GetWishesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWishesResponse, error) {
	rsp, err := c.GetWishes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWishesResponse(rsp)
}

// AddWishWithBodyWithResponse request with arbitrary body returning *AddWishResponse
func (c *ClientWithResponses) AddWishWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddWishResponse, error) {
	rsp, err := c.AddWishWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddWishResponse(rsp)
}

func (c *ClientWithResponses) AddWishWithResponse(ctx context.Context, body AddWishJSONRequestBody, reqEditors ...RequestEditorFn) (*AddWishResponse, error) {
	rsp, err := c.AddWish(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddWishResponse(rsp)
}

// GetWishByIdWithResponse request returning *GetWishByIdResponse
func (c *ClientWithResponses) GetWishByIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetWishByIdResponse, error) {
	rsp, err := c.GetWishById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWishByIdResponse(rsp)
}

// SyncWishByIdWithResponse request returning *SyncWishByIdResponse
func (c *ClientWithResponses) SyncWishByIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*SyncWishByIdResponse, error) {
	rsp, err := c.SyncWishById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSyncWishByIdResponse(rsp)
}

// ParseGetWishesResponse parses an HTTP response from a GetWishesWithResponse call
func ParseGetWishesResponse(rsp *http.Response) (*GetWishesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWishesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Wish
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddWishResponse parses an HTTP response from a AddWishWithResponse call
func ParseAddWishResponse(rsp *http.Response) (*AddWishResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddWishResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetWishByIdResponse parses an HTTP response from a GetWishByIdWithResponse call
func ParseGetWishByIdResponse(rsp *http.Response) (*GetWishByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWishByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Wish
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSyncWishByIdResponse parses an HTTP response from a SyncWishByIdWithResponse call
func ParseSyncWishByIdResponse(rsp *http.Response) (*SyncWishByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyncWishByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all wishes
	// (GET /wishes)
	GetWishes(ctx echo.Context) error
	// Creates a new wish
	// (POST /wishes)
	AddWish(ctx echo.Context) error
	// Returns a wish by ID
	// (GET /wishes/{id})
	GetWishById(ctx echo.Context, id int64) error
	// Synchronizes a wish by ID
	// (POST /wishes/{id}/sync)
	SyncWishById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetWishes converts echo context to params.
func (w *ServerInterfaceWrapper) GetWishes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWishes(ctx)
	return err
}

// AddWish converts echo context to params.
func (w *ServerInterfaceWrapper) AddWish(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddWish(ctx)
	return err
}

// GetWishById converts echo context to params.
func (w *ServerInterfaceWrapper) GetWishById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWishById(ctx, id)
	return err
}

// SyncWishById converts echo context to params.
func (w *ServerInterfaceWrapper) SyncWishById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SyncWishById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/wishes", wrapper.GetWishes)
	router.POST(baseURL+"/wishes", wrapper.AddWish)
	router.GET(baseURL+"/wishes/:id", wrapper.GetWishById)
	router.POST(baseURL+"/wishes/:id/sync", wrapper.SyncWishById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXbXPbtg//Kjj+/y/anRJnXW8v/Gp5nruH9GJnuV4ud6FFyGIqkSoJxdV6/u47UPJD",
	"I7l13C5Lb3tlmQQBEPj9APCDiG1eWIOGvOh/ED5OMZfh89g56/ijcLZARxrDcmwV8q9CHztdkLZG9Gth",
	"CHuRoKpA0RfaEE7QiVkkcvReTtaem28vjnpy2kzEbBYJh+9K7VCJ/pVYygVL1wt5O77FmNjSKzvu8Nmh",
	"JFT71HZgpHOEaYoGbu0YptJDIywikViXSxJ9oSThDum8w8NI4DxOn7gZ6CToT6TOguqWlkQb7dNNfZxL",
	"b+ykVm21gyOwwa1VLdrQjy87c+hJuo2D2Ahv7J8nSaVvax6G9aWfaMqckVCgUXw0Eq40pv5aBNeXcYyo",
	"UK0gZGlqqn3Khv7vMBF98b/ekgG9Bv69S5a5jz7NusPphb9dCPwdp5eNiXsovMsTf46F7QhgikDSTZDg",
	"EJ3547edkyE4LKzXZF0FZMGTdQiUImSyQudBGhX+JpkkcNYSJDpD8JUnzP1uV5RLpztgkDNAS6fBmlph",
	"yBicH58OhqPzN73z49dnw8Ho7PzNVX+0f3p99dPR4PR4OLr+LF/ZXrRy765wrYmVNXfoaH8itWm7fFjv",
	"guRt0HwBD5RKAukQZOZQqgoCDLxPyiyDRh+qdlwi8X5nYneaxUyPd8+CHZkdWJuxi3VFOMlkB/QPwx7I",
	"Og3BFXjGiJKkxxnCVFMKXptJmUmnqXq+tf1fQ9rbHhxZMJagNIWM364CRBuy4f8SSLswSIBS7UF7UNrL",
	"cYYqgpvawijVJqDhJoCrWX1tVS7NDeSlJ5CZtzDGxdntw1mrXRvQersJaMD+LowsoGGzC4/rmNzzrZb5",
	"AtcWcVifbqOgKH0KkqNp1uVd2fgtuueP4vk/XlyYZ8PKxAND6O5kNsS47ct+STaXpGOZZRWQ05MJOggU",
	"9ZWJPbA5DGRh/AZFfhee7bGXDeieP6zBNRV7gw6nTVHSRVeNvHDZg6sjS4YTNTgoZHhZh6BOywRiaXiZ",
	"uJRNdaZi6RTEqXQyJnQ+gpvvbjoDnklPh9YkenJRcHNdk/lFb2Zf4iBfOskSoVOzFiiDgs3bNR86afJ9",
	"Mp9FNjAfjC2yvd0os2p72IwZ25l+6JBi79BNnV5fis/mAnMatXpS4dCjIdC1U1183Ib93pYu7gDAhdHv",
	"SgSt0JBONDomBBuuD8z/MUUYkHVfKD0qhqu8s1qBKotMx1z0WAq7uT/FcWrt2+O6fm1K+7IgSeihLKwB",
	"hzHqO20moE1sc/5otDL/f5ZubN1iJcTUl0VhOYEP76ldk92C/avFdBHa9ugyCxUjCQWXNGW8d1TGMZwf",
	"D0ew/3ogInGHztcR+H53b3cvgKhAIwst+uKHsBSJQlIawNSrI8yfEwyzBo9EgaoDJfriFOmylmD3fWGN",
	"r6Vf7O01QxOhCQdlUWdNW9O79dYs33b8pbmIbzYDL64tnZNVfet7oP9FhLVElhk9yI1PWa9fnx3mLsx7",
	"LDAmVICNDE/8eS5dJfriHKl0xoPMsgaw7F1hfUc895W6rJsDgwE9HVhVfbUbzN8BHXfg9aYhSKVCBVrC",
	"kVyJs1aCX3w1v/iF3OHTfhxjwdXwCSWznrY8SDA4rRs5CzQ86X3QavY5shxUAxU45mSOFKr21fo5gZPi",
	"AoJCQRD9QE4RCSPzMCy0UxWtxOCzM8bs+guZu8GjdQ1BX+69/PvzGYDNr5HElkY9ybpQ53lcweCoBaYe",
	"jwahEt/a8Wod/tiUiO5hbYL0ig88RlkO9P2Wq3IIbYg8f90n8UaR3pzUt3b8TXN6TbF+REq/suOnzmhO",
	"8hpCb8Xjg4rr2HZ9I8Cbn35PFGxfv8b811g+Km3h2S+Xw0r36MmP1+3GE25RqbNG/4mPBrFHHT7/5Xga",
	"LvPbmlZms78CAAD//y2i6SiwGwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
